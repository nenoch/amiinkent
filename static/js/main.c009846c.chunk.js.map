{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","kentZipCodes","useState","currentZipCode","setcurrentZipCode","useEffect","navigator","console","log","geolocation","getCurrentPosition","position","coordinates","coords","latitude","longitude","Geocode","setApiKey","process","fromLatLng","then","response","components","type","zipCode","results","address_components","filter","component","types","indexOf","map","item","long_name","pop","error","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","amIinKent","some","digits","className","style","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAyGeA,EArGH,WACV,IAAMC,EAAe,CACnB,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MA7Bc,EAgC4BC,mBAAS,IAhCrC,mBAgCTC,EAhCS,KAgCOC,EAhCP,KAkChBC,qBAAU,WAOR,GAAI,gBAAiBC,UAAW,CAC9BC,QAAQC,IAAI,aA+BZF,UAAUG,YAAYC,oBAvBN,SAACC,GACf,IAAMC,EAAcD,EAASE,OAC7BN,QAAQC,IAAR,qBAA0BI,EAAYE,WACtCP,QAAQC,IAAR,qBAA0BI,EAAYG,YACtCC,IAAQC,UAAUC,2CAClBF,IAAQG,WAAWP,EAAYE,SAAUF,EAAYG,WAAWK,MAC9D,SAACC,GACC,IAtBoBC,EAAYC,EAsB1BC,GAtBcF,EAuBlBD,EAASI,QAAQ,GAAGC,mBAvBUH,EAwB9B,cAvBRD,EACGK,QAAO,SAACC,GAAD,OAAiD,IAAlCA,EAAUC,MAAMC,QAAQP,MAC9CQ,KAAI,SAACC,GAAD,OAAUA,EAAKC,aACnBC,OAAS,MAsBN9B,EAAkBoB,GAClBjB,QAAQC,IAAIgB,MAEd,SAACW,GACC5B,QAAQ4B,MAAMA,SAKN,SAACC,GACb7B,QAAQ8B,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIG,YA3B1B,CACdC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,SA4BdnC,QAAQC,IAAI,mBAEb,CAACJ,IAEJ,IAAMuC,EAAY,kBAChB1C,EAAa2C,MAAK,SAACC,GAAD,OAAgD,IAApC1C,EAAe2B,QAAQe,OAGvD,OAFAtC,QAAQC,IAAI,YAAamC,KAGvB,qBAAKG,UAAU,MAAf,SACE,qBACEA,UAAU,OACVC,MAAO,CACLC,gBAAiBL,IAAc,UAAY,WAH/C,SAMGA,IACC,oBAAIG,UAAU,MAAd,iBAEA,oBAAIA,UAAU,KAAd,qBCtFKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c009846c.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Geocode from \"react-geocode\";\n\nconst App = () => {\n  const kentZipCodes = [\n    \"BR\",\n    \"CT\",\n    \"DA\",\n    \"ME\",\n    \"TN1\",\n    \"TN2\",\n    \"TN3\",\n    \"TN4\",\n    \"TN8\",\n    \"TN9\",\n    \"TN10\",\n    \"TN11\",\n    \"TN12\",\n    \"TN13\",\n    \"TN14\",\n    \"TN15\",\n    \"TN16\",\n    \"TN17\",\n    \"TN18\",\n    \"TN23\",\n    \"TN24\",\n    \"TN25\",\n    \"TN26\",\n    \"TN27\",\n    \"TN28\",\n    \"TN29\",\n    \"TN30\",\n    \"BR\",\n  ];\n\n  const [currentZipCode, setcurrentZipCode] = useState(\"\");\n\n  useEffect(() => {\n    const extractFromAddress = (components, type) =>\n      components\n        .filter((component) => component.types.indexOf(type) === 0)\n        .map((item) => item.long_name)\n        .pop() || null;\n\n    if (\"geolocation\" in navigator) {\n      console.log(\"Available\");\n\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0,\n      };\n\n      const success = (position) => {\n        const coordinates = position.coords;\n        console.log(`Latitude : ${coordinates.latitude}`);\n        console.log(`Longitude: ${coordinates.longitude}`);\n        Geocode.setApiKey(process.env.REACT_APP_GOOGLE_API);\n        Geocode.fromLatLng(coordinates.latitude, coordinates.longitude).then(\n          (response) => {\n            const zipCode = extractFromAddress(\n              response.results[0].address_components,\n              \"postal_code\"\n            );\n            setcurrentZipCode(zipCode);\n            console.log(zipCode);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n      };\n\n      const error = (err) => {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n      };\n      navigator.geolocation.getCurrentPosition(success, error, options);\n    } else {\n      console.log(\"Not Available\");\n    }\n  }, [setcurrentZipCode]);\n\n  const amIinKent = () =>\n    kentZipCodes.some((digits) => currentZipCode.indexOf(digits) !== -1);\n  console.log(\"amIinKent\", amIinKent());\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"body\"\n        style={{\n          backgroundColor: amIinKent() ? \"#b32828\" : \"#112c74\"\n        }}\n      >\n        {amIinKent() ? (\n          <h1 className=\"yes\">YES</h1>\n        ) : (\n          <h1 className=\"no\">NO</h1>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}